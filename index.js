// Generated by CoffeeScript 1.6.3
(function() {
  var CalDav, Calendar, DateUtility, UserData,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  DateUtility = (function() {
    function DateUtility() {}

    DateUtility.convertICalTimeToISOTime = function(time) {
      var datetime, day, gmt, matches;
      matches = time.match(/(\d{4})(\d{2})(\d{2})T?(\d{2})?(\d{2})?(\d{2})?(Z?)/i);
      matches.shift();
      day = matches.slice(0, 3).join('-');
      time = matches.slice(3, 6).join(':');
      if (time === '::') {
        time = '';
      }
      gmt = matches.slice(6) === [void 0] ? 'Z' : matches.slice(6);
      datetime = day;
      if (time) {
        datetime += "T" + time;
      }
      if (gmt) {
        datetime += gmt;
      }
      return datetime;
    };

    DateUtility.convertDateToIcalTime = function(date) {
      return date.toISOString().replace(/-|:|\.\d{3}/gi, '');
    };

    return DateUtility;

  }).call(this);

  Calendar = (function() {
    function Calendar(caldav) {
      var _this = this;
      this.caldav = caldav;
      this.addCalendarEntry = __bind(this.addCalendarEntry, this);
      this.calendar = jQuery('#calendar');
      this.calendar.fullCalendar({
        firstDay: 1,
        header: {
          left: 'prev,next today',
          center: 'title',
          right: 'month,agendaWeek,agendaDay'
        },
        timeFormat: 'HH:mm{ - HH:mm}\n',
        ignoreTimezone: false,
        contentHeight: jQuery(window).height() - 250,
        events: function(viewStartDate, viewEndDate, callback) {
          var endDate, startDate;
          startDate = DateUtility.convertDateToIcalTime(viewStartDate);
          endDate = DateUtility.convertDateToIcalTime(viewEndDate);
          return _this.caldav.get(startDate, endDate, function(calDavEntry) {
            _this.addCalendarEntry(calDavEntry);
            return callback();
          });
        }
      });
    }

    Calendar.prototype.addCalendarEntry = function(calDavEntry) {
      var end, event;
      if ((calDavEntry != null ? calDavEntry.VEVENT : void 0) != null) {
        if (calDavEntry.VEVENT.DTEND) {
          end = DateUtility.convertICalTimeToISOTime(calDavEntry.VEVENT.DTEND);
        }
        event = {
          id: calDavEntry.VEVENT.UID,
          title: calDavEntry.VEVENT.SUMMARY,
          start: DateUtility.convertICalTimeToISOTime(calDavEntry.VEVENT.DTSTART)
        };
        if (end) {
          event.end = end;
          event.allDay = false;
        }
        return this.calendar.fullCalendar('renderEvent', event);
      }
    };

    return Calendar;

  })();

  CalDav = (function() {
    function CalDav(userData) {
      this.userData = userData;
      this.get = __bind(this.get, this);
    }

    CalDav.prototype.get = function(datestart, dateend, callback) {
      var _this = this;
      return jQuery.ajax({
        url: this.userData.url,
        method: "REPORT",
        data: "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<C:calendar-query xmlns:D=\"DAV:\" xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n    <D:prop>\n        <C:calendar-data>\n            <C:expand start=\"" + datestart + "\" end=\"" + dateend + "\"/>\n        </C:calendar-data>\n        <D:getetag/>\n    </D:prop>\n    <C:filter>\n        <C:comp-filter name=\"VCALENDAR\">\n            <C:comp-filter name=\"VEVENT\">\n                <C:time-range start=\"" + datestart + "\" end=\"" + dateend + "\"/>\n            </C:comp-filter>\n        </C:comp-filter>\n    </C:filter>\n</C:calendar-query>",
        headers: {
          "Depth": "1",
          "Content-Type": "application/xml"
        },
        username: this.userData.user,
        password: this.userData.password,
        dataType: "xml",
        success: function(xmlData) {
          var foundElements;
          foundElements = $(xmlData).find("cal\\:calendar-data, calendar-data");
          if (foundElements.size() === 0) {
            if ($(xmlData).find("d\\:multistatus, multistatus").size() > 0) {
              callback(true);
            }
          }
          return foundElements.each(function(index, data) {
            return callback(_this.parseCalDav($(data).text()));
          });
        },
        error: function() {
          return callback(false);
        }
      });
    };

    CalDav.prototype.parseCalDav = function(calendarString) {
      var CalDavEntry, entry, isSubElement, label, line, lines, subElementName, value, _i, _len;
      CalDavEntry = {};
      isSubElement = false;
      subElementName = "";
      lines = calendarString.split('\r\n');
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        entry = line.split(':');
        label = entry.shift().split(';')[0];
        value = entry.join(':');
        if (label === 'BEGIN') {
          isSubElement = true;
          subElementName = value;
          CalDavEntry[value] = {};
          continue;
        }
        if (label === 'END') {
          isSubElement = false;
          continue;
        }
        if (isSubElement) {
          CalDavEntry[subElementName][label] = value;
        } else {
          CalDavEntry[label] = value;
        }
      }
      return CalDavEntry;
    };

    return CalDav;

  })();

  UserData = (function() {
    function UserData() {
      this.saveDataToLocalStorage = __bind(this.saveDataToLocalStorage, this);
      this.loadDataFromLocalStorage = __bind(this.loadDataFromLocalStorage, this);
      this.setDataToForm = __bind(this.setDataToForm, this);
      this.fetchDataFromForm = __bind(this.fetchDataFromForm, this);
      this.localstorage = window.localStorage;
      this.prefix = "caldav.webclient.";
    }

    UserData.prototype.fetchDataFromForm = function() {
      this.url = jQuery('#url').val();
      this.user = jQuery('#user').val();
      return this.password = jQuery('#password').val();
    };

    UserData.prototype.setDataToForm = function() {
      jQuery('#url').val(this.url);
      jQuery('#user').val(this.user);
      return jQuery('#password').val(this.password);
    };

    UserData.prototype.loadDataFromLocalStorage = function() {
      this.url = this.localstorage.getItem(this.prefix + "url");
      this.user = this.localstorage.getItem(this.prefix + "user");
      this.password = this.localstorage.getItem(this.prefix + "password");
      if (this.url) {
        return true;
      }
    };

    UserData.prototype.saveDataToLocalStorage = function() {
      this.localstorage.setItem(this.prefix + "url", this.url);
      this.localstorage.setItem(this.prefix + "user", this.user);
      return this.localstorage.setItem(this.prefix + "password", this.password);
    };

    return UserData;

  })();

  jQuery(function() {
    var caldav, calendar, userdata;
    userdata = new UserData();
    caldav = new CalDav(userdata);
    calendar = null;
    if (userdata.loadDataFromLocalStorage()) {
      jQuery('#calendar, #login').toggleClass('hidden');
      if (!calendar) {
        calendar = new Calendar(caldav);
      }
    }
    jQuery('#url, #user, #password').on('keydown', function(event) {
      var today, tomorrow, tomorrowDate;
      if (event.keyCode === 13) {
        userdata.fetchDataFromForm();
        today = DateUtility.convertDateToIcalTime(new Date());
        tomorrowDate = new Date();
        tomorrowDate.setDate(tomorrowDate.getDate() + 1);
        tomorrow = DateUtility.convertDateToIcalTime(tomorrowDate);
        return caldav.get(today, tomorrow, function(data) {
          if (data) {
            userdata.saveDataToLocalStorage();
            jQuery('#calendar, #login').toggleClass('hidden');
            if (!calendar) {
              calendar = new Calendar(caldav);
            }
            return $('#login input').removeClass('error');
          } else {
            return $('#login input').addClass('error');
          }
        });
      }
    });
    return jQuery('#changecredentials').on('click', function() {
      jQuery('#calendar, #login').toggleClass('hidden');
      return userdata.setDataToForm();
    });
  });

  /*
  if Notification.permission is "granted"
    setTimeout ->
      new Notification "title", body: "notification body"
    , 1000
  else if Notification.permission isnt 'denied'
    Notification.requestPermission (status) ->
      if Notification.permission is "granted"
        window.location.reload();
      else
        alert "Notifications are disabled."
  */


}).call(this);

/*
//@ sourceMappingURL=index.map
*/
